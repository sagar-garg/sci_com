ti=0; % Starting Time
tf=5; % End time
y0=1; % Initial Value of Function
dt=[1 (1/2) (1/4) (1/8)]; % various time step size
e1=[]; % vector to store error for Explicit Euler Method for above time step size
e2=[]; % vector to store error for Heun's Method for above time step size
e3=[]; % vector to store error for Runge Kutta Method for above time step size

% Error Evaluation and plots
for i=1:max(size(dt))
    e1(i)=err(dt(i),ti,tf,ex_eu(y0,ti,tf,dt(i)),ana(ti,tf,dt(i)));
    e2(i)=err(dt(i),ti,tf,heun(y0,ti,tf,dt(i)),ana(ti,tf,dt(i)));
    e3(i)=err(dt(i),ti,tf,r_k(y0,ti,tf,dt(i)),ana(ti,tf,dt(i)));
    pl_ap(y0,ti,tf,dt(i),1)
    pl_ap(y0,ti,tf,dt(i),2)
    pl_ap(y0,ti,tf,dt(i),3)
    pl_ap(y0,ti,tf,dt(i),4)
end
e1
e2
e3

% relative error calculation when time step is ha


r_e1=[];
r_e2=[];
r_e3=[];
for i=2:max(size(dt))
    %disp('here')
    r_e1(i-1)=rel_err(e1(i-1),e1(i));
    r_e2(i-1)=rel_err(e2(i-1),e2(i));
    r_e3(i-1)=rel_err(e3(i-1),e3(i));
end
r_e1
r_e2
r_e3
e1=[];
e2=[];
e3=[];
for i=1:max(size(dt))
    %disp('here')
    e1(i)=err(dt(i),ti,tf,ex_eu(y0,ti,tf,dt(i)),ex_eu(y0,ti,tf,dt(max(size(dt)))));
    e2(i)=err(dt(i),ti,tf,heun(y0,ti,tf,dt(i)),heun(y0,ti,tf,dt(max(size(dt)))));
    e3(i)=err(dt(i),ti,tf,r_k(y0,ti,tf,dt(i)),r_k(y0,ti,tf,dt(max(size(dt)))));
end
e1
e2
e3